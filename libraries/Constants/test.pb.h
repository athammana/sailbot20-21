/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.3 at Tue Sep 10 13:42:57 2019. */

#ifndef PB_TEST_PB_H_INCLUDED
#define PB_TEST_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _TRIM_STATE {
    TRIM_STATE_MIN_LIFT = 0,
    TRIM_STATE_STBD_TACK = 1,
    TRIM_STATE_PORT_TACK = 2,
    TRIM_STATE_MAX_DRAG_STBD = 3,
    TRIM_STATE_MAX_DRAG_PORT = 4,
    TRIM_STATE_MAN_CTRL = 5
} TRIM_STATE;
#define _TRIM_STATE_MIN TRIM_STATE_MIN_LIFT
#define _TRIM_STATE_MAX TRIM_STATE_MAN_CTRL
#define _TRIM_STATE_ARRAYSIZE ((TRIM_STATE)(TRIM_STATE_MAN_CTRL+1))

/* Struct definitions */
typedef struct _vehicle_state {
    TRIM_STATE state;
    uint32_t curHeelAngle;
    uint32_t maxHeelAngle;
    uint32_t controlAngle;
    uint32_t windAngle;
    uint32_t vIn;
/* @@protoc_insertion_point(struct:vehicle_state) */
} vehicle_state;

/* Default values for struct fields */

/* Initializer values for message structs */
#define vehicle_state_init_default               {_TRIM_STATE_MIN, 0, 0, 0, 0, 0}
#define vehicle_state_init_zero                  {_TRIM_STATE_MIN, 0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define vehicle_state_state_tag                  1
#define vehicle_state_curHeelAngle_tag           2
#define vehicle_state_maxHeelAngle_tag           3
#define vehicle_state_controlAngle_tag           4
#define vehicle_state_windAngle_tag              5
#define vehicle_state_vIn_tag                    6

/* Struct field encoding specification for nanopb */
extern const pb_field_t vehicle_state_fields[7];

/* Maximum encoded size of messages (where known) */
#define vehicle_state_size                       32

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define TEST_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
